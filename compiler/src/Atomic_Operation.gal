comment 'Atomic_Operation.gal';

operation And and Repeating
{
    alias and & &&;
    class.property string Mumps_Operator '&';
    class.property integer Js_Precedence 6;
    class.property string Js_Operator '&&';
    class.property string Py_Operator 'and';
    class.property integer Py_Precedence 6;
    class.property string Php_Operator 'and';
    class.property integer Php_Precedence 6;
    method void Attributes
    {
        entity Argument;
        foreach [my Arguments] Argument
        {
            .= Argument Usage 'flag';
        }
    }
}

operation Add + Repeating
{
    alias add;
    class.property string Mumps_Operator '+';
    class.property integer Js_Precedence 6;
    class.property integer Py_Precedence 6;
    class.property integer Php_Precedence 6;
    class.property string Js_Operator '+';
    class.property string Py_Operator '+';
    class.property string Php_Operator '+';
    method void Attributes
    {
        entity Argument;
        foreach [my Arguments] Argument
        {
            .= Argument Usage 'number';
        }
    }
}

operation Append append Append_Args
{
    class.property integer Js_Precedence 6;
    class.property integer Py_Precedence 6;
    class.property integer Php_Precedence 6;
    class.property string Py_Operator ' + ';
    class.property string Js_Operator ' + ';
    class.property string Php_Operator ' + ';
    method void Attributes
    {
        entity Argument;
        foreach [my Arguments] Argument
        {
            .= Argument Usage 'string';
        }
    }
}
operation Call . Invocation
{
    argument Target;
    argument Method;
    python [my Target Python] '.' [my Method Python] '(' (i Python_Args ', ') ')';
    javascript [my Target Javascript] '.' [my Method Javascript] '(' (i Javascript_Args ', ') ')';
    comment php [my Target Php] '.' [my Method Php] '(' (i Php_Args ', ') ')';
}
operation Classpropget classpropget
{
    argument First;
    optional Second;
    method void Python_Generate
    {
        string Class_Name;
        string Property_Name;
        if (defined [my Second])
        {
            = Class_Name [my First Python];
            = Property_Name [my Second Python];
        }
        else
        {
            = Class_Name 'self.__class__';
            = Property_Name [my First Python];
        }
        string Code Class_Name '.' Property_Name;
        my= Python Code;
    }
    method void Javascript_Generate
    {
        string Class_Name;
        string Property_Name;
        if (defined [my Second])
        {
            = Class_Name [my First Javascript];
            = Property_Name [my Second Javascript];
        }
        else
        {
            = Class_Name 'this.constructor';
            if (and (defined [my Method_Context])
                    (isa [my Method_Context] :Class_Method_Statement))
            {
                = Class_Name 'this';
            }
            = Property_Name [my First Javascript];
        }
        string Code Class_Name '.' Property_Name;
        my= Javascript Code;
    }
}
operation Contains contains Binary
{
    argument String;
    argument Search;
    python [my Search Python] ' in ' [my String Python];
    javascript [my String Javascript] '.includes(' [my Search Javascript] ')';
}

operation Defined defined Unary
{
    class.property integer Js_Precedence 6;
    class.property integer Py_Precedence 6;

    argument First;
    
    python [my First Python] ' is not None';
    javascript [my First Javascript] ' !== undefined';
}

operation Dictionary_Get dict.get
{
    argument Dictionary;
    argument Key;
    python [my Dictionary Python] '[' [my Key Python] ']';
    javascript [my Dictionary Javascript] '[' [my Key Javascript] ']';
}

operation Divide / Binary
{
    class.property integer Js_Precedence 6;
    class.property integer Py_Precedence 6;
    class.property string Js_Operator '/';
    class.property string Py_Operator '/';
}
operation Equal = Binary
{
    class.property integer Js_Precedence 6;
    class.property integer Py_Precedence 6;
    class.property string Js_Operator '==';
    class.property string Py_Operator '==';
}
operation Greater greater Binary
{
    class.property integer Js_Precedence 6;
    class.property integer Py_Precedence 6;
    class.property string Js_Operator '>';
    class.property string Py_Operator '>';
}
operation Greater_Equal ge Binary
{
    class.property integer Js_Precedence 6;
    class.property integer Py_Precedence 6;
    class.property string Js_Operator '>=';
    class.property string Py_Operator '>=';
}
operation Http_Fetch http.fetch;
operation Isa isa Binary
{
    class.property integer Js_Precedence 6;
    argument Variable;
    argument Class_Name;
    javascript [my Variable Javascript] ' instanceof ' [my Class_Name Javascript];
    python 'isinstance(' [my Variable Python] ', ' [my Class_Name Python] ')';
}
operation Is_Null is.null
{
    argument Variable;
    javascript '(' [my Variable Javascript] ' === undefined || ' [my Variable Javascript] ' == "")';
    python '(' [my Variable Python] ' in (None, ""))';
}

operation Less less Binary
{
    class.property integer Js_Precedence 6;
    class.property integer Py_Precedence 6;
    class.property string Js_Operator '<';
    class.property string Py_Operator '<';
}
operation Less_Equal le Binary
{
    class.property integer Js_Precedence 6;
    class.property integer Py_Precedence 6;
    class.property string Js_Operator '<=';
    class.property string Py_Operator '<=';
}
operation List_Get list.get
{
    argument List;
    argument Node;
    method void Python_Generate
    {
        if (not (defined [my List Python]))
        {
            error (i Failure_Message 'List Python missing');
        }
        if (not (defined [my Node Python]))
        {
            error (i Failure_Message 'Node Python missing');
        }
        string Code [my List Python] '[' [my Node Python] ']';
        my= Python Code;
    }
    method void Javascript_Generate
    {
        if (not (defined [my List Javascript]))
        {
            error (i Failure_Message 'List Javascript missing');
        }
        if (not (defined [my Node Javascript]))
        {
            error (i Failure_Message 'Node Javascript missing');
        }
        string Code [my List Javascript] '[' [my Node Javascript] ']';
        my= Javascript Code;
    }
}
operation List_Last list.last Unary
{
    argument First;
    method void Python_Generate
    {
        if (not (defined [my First Python]))
        {
            error (i Failure_Message 'List Python missing');
        }
        string Code [my First Python] '[-1]';
        my= Python Code;
    }
    method void Javascript_Generate
    {
        if (not (defined [my First Javascript]))
        {
            error (i Failure_Message 'List Javascript missing');
        }
        string Code [my First Javascript] '[' [my First Javascript] '.length-1]';
        my= Javascript Code;
    }
}
operation List_Length list.length Unary
{
    argument First;
    python 'len(' [my First Python] ')';
    javascript [my First Javascript] '.length';
}
operation List_Pop pop Unary
{
    alias list.pop;
    argument First;
    python [my First Python] '.pop()';
    javascript [my First Javascript] '.pop()';
}
operation List_Shift shift Unary
{
    alias list.shift;
    argument First;
    python [my First Python] '.pop(0)';
    javascript [my First Javascript] '.shift()';
}
operation List_Split split Binary
{
    alias list.split;
    argument String;
    argument Delimiter;
    javascript [my String Javascript] '.split(' [my Delimiter Javascript] ')';
    python [my String Python] '.split(' [my Delimiter Python] ')';
}
operation Lowercase lowercase Unary
{
    argument First;
    python [my First Python] '.lower()';
    javascript [my First Javascript] '.toLowerCase()';
}
operation Multiply * Repeating
{
    class.property integer Js_Precedence 6;
    class.property integer Py_Precedence 6;
    class.property string Js_Operator '*';
    class.property string Py_Operator '*';
}
operation New new Invocation
{
    argument Class_Name;
    python [my Class_Name Python] '(' (i Python_Args ', ') ')';
    javascript 'new ' [my Class_Name Javascript] '(' (i Javascript_Args ', ') ')';
}
operation Not not Unary
{
    argument First;
    alias !;
    class.property integer Js_Precedence 6;
    class.property integer Py_Precedence 6;
    class.property string Js_Operator '!';
    class.property string Py_Operator 'not';
}
operation Not_Equal != Binary
{
    class.property integer Js_Precedence 6;
    class.property integer Py_Precedence 6;
    class.property string Js_Operator '!=';
    class.property string Py_Operator '!=';
}

operation Not_Null not.null
{
    argument Variable;
    javascript '(' [my Variable Javascript] ' !== undefined && ' [my Variable Javascript] ' > "")';
    python [my Variable Python] ' > ""';
}

operation Or or Repeating
{
    alias |;
    class.property integer Js_Precedence 6;
    class.property integer Py_Precedence 6;
    class.property string Js_Operator '||';
    class.property string Py_Operator 'or';
}
operation Sql_Escape sql.escape Unary
{
    argument First;
}
operation Sql_Query sql.query Unary
{
    argument First;
}
operation Sql_Secure_Query sql.secure.query Unary
{
    argument First;
}
operation String string Unary
{
    argument First;
}
operation String_Equal string.eq String_Binary
{
    class.property integer Js_Precedence 6;
    class.property integer Py_Precedence 6;
    class.property string Js_Operator '==';
    class.property string Py_Operator '==';
}
operation String_Greater string.gt String_Binary
{
    class.property integer Js_Precedence 6;
    class.property integer Py_Precedence 6;
    class.property string Js_Operator '>';
    class.property string Py_Operator '>';
}
operation String_Greater_Equal string.ge String_Binary
{
    class.property integer Js_Precedence 6;
    class.property integer Py_Precedence 6;
    class.property string Js_Operator '>=';
    class.property string Py_Operator '>=';
}
operation String_Length string.length String_Unary
{
    argument First;
    alias length;
    python 'len(' [my First Python] ')';
    javascript [my First Javascript] '.length';
}
operation String_Less string.lt String_Binary
{
    class.property integer Js_Precedence 6;
    class.property integer Py_Precedence 6;
    class.property string Js_Operator '<';
    class.property string Py_Operator '<';
}
operation String_Less_Equal string.le String_Binary
{
    class.property integer Js_Precedence 6;
    class.property integer Py_Precedence 6;
    class.property string Js_Operator '<=';
    class.property string Py_Operator '<=';
}
operation String_Not_Equal string.ne String_Binary
{
    class.property integer Js_Precedence 6;
    class.property integer Py_Precedence 6;
    class.property string Js_Operator '!=';
    class.property string Py_Operator '!=';
}
operation Substring substring
{
    argument String_Value;
    argument Start_Index;
    optional Length;
    method void Javascript_Generate
    {
        string Code [my String_Value Javascript] '.substr(' [my Start_Index Javascript];
        if (defined [my Length])
        {
            append Code ', ' [my Length Javascript];
        }
        append Code ')';
        my= Javascript Code;
    }
    method void Python_Generate
    {
        string SVal [my String_Value Python];
        string Start [my Start_Index Python];
        string Code;
        if (defined [my Length])
        {
            string Len [my Length Python];
            if (string.eq Len '1')
            {
                = Code (append SVal '[' Start ']');
            }
            else
            {
                = Code (append SVal '[' Start ':(' Start ')+(' Len ')]');
            }
        }
        else
        {
            = Code (append SVal '[' Start ':]');
        }
        my= Python Code;
    }
}
operation Subtract - Binary
{
    class.property integer Js_Precedence 6;
    class.property integer Py_Precedence 6;
    class.property string Js_Operator '-';
    class.property string Py_Operator '-';
}
operation Uppercase uppercase Unary
{
    argument First;
    python [my First Python] '.upper()';
    javascript [my First Javascript] '.toUpperCase()';
}

operation We we Invocation
{
    argument Method;
    python 'self.__class__.' [my Method Python] '(' (i Python_Args ', ') ')';
    method void Javascript_Generate
    {
        string Class_Name 'this.constructor';
        if (and (defined [my Method_Context])
                (isa [my Method_Context] :Class_Method_Statement))
        {
            = Class_Name 'this';
        }
        string Code Class_Name '.' [my Method Javascript] '(' (i Javascript_Args ', ') ')';
        my= Javascript Code;
    }
}

operation Whitespace whitespace Unary
{
    argument First;
    javascript '!' [my First Javascript] '.match(/\S/)';
    python 'not(re.match(r"\S",' [my First Python] '))';
}
